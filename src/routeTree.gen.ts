/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as IndexImport } from "./routes/index";
import { Route as ItemTableImport } from "./routes/item-table";
import { Route as VendorAssignmentImport } from "./routes/vendor-assignment";
import { Route as YipItemTableImport } from "./routes/yip-item-table";

// Create/Update Routes

const YipItemTableRoute = YipItemTableImport.update({
	id: "/yip-item-table",
	path: "/yip-item-table",
	getParentRoute: () => rootRoute,
} as any);

const VendorAssignmentRoute = VendorAssignmentImport.update({
	id: "/vendor-assignment",
	path: "/vendor-assignment",
	getParentRoute: () => rootRoute,
} as any);

const ItemTableRoute = ItemTableImport.update({
	id: "/item-table",
	path: "/item-table",
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		"/item-table": {
			id: "/item-table";
			path: "/item-table";
			fullPath: "/item-table";
			preLoaderRoute: typeof ItemTableImport;
			parentRoute: typeof rootRoute;
		};
		"/vendor-assignment": {
			id: "/vendor-assignment";
			path: "/vendor-assignment";
			fullPath: "/vendor-assignment";
			preLoaderRoute: typeof VendorAssignmentImport;
			parentRoute: typeof rootRoute;
		};
		"/yip-item-table": {
			id: "/yip-item-table";
			path: "/yip-item-table";
			fullPath: "/yip-item-table";
			preLoaderRoute: typeof YipItemTableImport;
			parentRoute: typeof rootRoute;
		};
	}
}

// Create and export the route tree

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/item-table": typeof ItemTableRoute;
	"/vendor-assignment": typeof VendorAssignmentRoute;
	"/yip-item-table": typeof YipItemTableRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/item-table": typeof ItemTableRoute;
	"/vendor-assignment": typeof VendorAssignmentRoute;
	"/yip-item-table": typeof YipItemTableRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexRoute;
	"/item-table": typeof ItemTableRoute;
	"/vendor-assignment": typeof VendorAssignmentRoute;
	"/yip-item-table": typeof YipItemTableRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "/item-table" | "/vendor-assignment" | "/yip-item-table";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/item-table" | "/vendor-assignment" | "/yip-item-table";
	id:
		| "__root__"
		| "/"
		| "/item-table"
		| "/vendor-assignment"
		| "/yip-item-table";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	ItemTableRoute: typeof ItemTableRoute;
	VendorAssignmentRoute: typeof VendorAssignmentRoute;
	YipItemTableRoute: typeof YipItemTableRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	ItemTableRoute: ItemTableRoute,
	VendorAssignmentRoute: VendorAssignmentRoute,
	YipItemTableRoute: YipItemTableRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/item-table",
        "/vendor-assignment",
        "/yip-item-table"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/item-table": {
      "filePath": "item-table.tsx"
    },
    "/vendor-assignment": {
      "filePath": "vendor-assignment.tsx"
    },
    "/yip-item-table": {
      "filePath": "yip-item-table.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
